Author: Johan Almbladh <johan@anyfi.net>
Date:   Mon May 20 18:46:02 2013 +0200

    mac80211: add support for reporting frame airtime use in radiotap

    The radiotap capture header supported by mac80211 provides some radio-level
    information on received frames such as bitrate and signal level. This is
    often sufficient for sniffer applications. With accurate airtime statistics
    it is possible to implement true "airtime fairness" bandwidth scheduling as
    a userspace daemon, a feature often available in commercial enterprise-grade
    access points.

    This patch adds support for reporting radio airtime use in microseconds per
    frame in the radiotap header.

    Signed-off-by: Johan Almbladh <johan@anyfi.net>

diff -urpN compat-wireless-2012-09-07-before-airtime/include/net/ieee80211_radiotap.h compat-wireless-2012-09-07-after-airtime/include/net/ieee80211_radiotap.h
--- compat-wireless-2012-09-07-before-airtime/include/net/ieee80211_radiotap.h	2012-09-08 11:59:50.000000000 +0200
+++ compat-wireless-2012-09-07-after-airtime/include/net/ieee80211_radiotap.h	2013-05-20 17:46:05.812055518 +0200
@@ -186,6 +186,10 @@ struct ieee80211_radiotap_header {
  * IEEE80211_RADIOTAP_AMPDU_STATUS	u32, u16, u8, u8	unitless
  *
  *	Contains the AMPDU information for the subframe.
+ *
+ * IEEE80211_RADIOTAP_AIRTIME           __le16       usecs
+ *
+ *     The number of microseconds of airtime used to transfer this packet.
  */
 enum ieee80211_radiotap_type {
 	IEEE80211_RADIOTAP_TSFT = 0,
@@ -210,6 +214,7 @@ enum ieee80211_radiotap_type {
 	IEEE80211_RADIOTAP_MCS = 19,
 	IEEE80211_RADIOTAP_AMPDU_STATUS = 20,
 
+	IEEE80211_RADIOTAP_AIRTIME = 28,
 	/* valid in every it_present bitmap, even vendor namespaces */
 	IEEE80211_RADIOTAP_RADIOTAP_NAMESPACE = 29,
 	IEEE80211_RADIOTAP_VENDOR_NAMESPACE = 30,
diff -urpN compat-wireless-2012-09-07-before-airtime/include/net/mac80211.h compat-wireless-2012-09-07-after-airtime/include/net/mac80211.h
--- compat-wireless-2012-09-07-before-airtime/include/net/mac80211.h	2013-05-20 17:28:42.194880495 +0200
+++ compat-wireless-2012-09-07-after-airtime/include/net/mac80211.h	2013-05-20 17:46:24.084146124 +0200
@@ -539,6 +539,7 @@ struct ieee80211_tx_rate {
  * @ampdu_len: number of aggregated frames.
  * 	relevant only if IEEE80211_TX_STAT_AMPDU was set.
  * @ack_signal: signal strength of the ACK frame
+ * @tx_usecs: airtime used to tx this frame
  */
 struct ieee80211_tx_info {
 	/* common information */
@@ -573,7 +574,8 @@ struct ieee80211_tx_info {
 			u8 ampdu_ack_len;
 			u8 ampdu_len;
 			u8 antenna;
-			/* 21 bytes free */
+			u16 tx_usecs;
+			/* 18 bytes free */
 		} status;
 		struct {
 			struct ieee80211_tx_rate driver_rates[
@@ -1252,6 +1254,9 @@ struct ieee80211_tx_control {
  * @IEEE80211_HW_P2P_DEV_ADDR_FOR_INTF: Use the P2P Device address for any
  *	P2P Interface. This will be honoured even if more than one interface
  *	is supported.
+ *
+ * @IEEE80211_HW_REPORTS_AIRTIME: The driver will include in the TX status
+ *      report an estimate of the radio time used to transmit the frame.
  */
 enum ieee80211_hw_flags {
 	IEEE80211_HW_HAS_RATE_CONTROL			= 1<<0,
@@ -1280,6 +1285,7 @@ enum ieee80211_hw_flags {
 	IEEE80211_HW_TX_AMPDU_SETUP_IN_HW		= 1<<23,
 	IEEE80211_HW_SCAN_WHILE_IDLE			= 1<<24,
 	IEEE80211_HW_P2P_DEV_ADDR_FOR_INTF		= 1<<25,
+	IEEE80211_HW_REPORTS_AIRTIME			= 1<<26,
 };
 
 /**
@@ -2779,7 +2785,7 @@ static inline int ieee80211_sta_ps_trans
  * The TX headroom reserved by mac80211 for its own tx_status functions.
  * This is enough for the radiotap header.
  */
-#define IEEE80211_TX_STATUS_HEADROOM	14
+#define IEEE80211_TX_STATUS_HEADROOM	16
 
 /**
  * ieee80211_sta_set_buffered - inform mac80211 about driver-buffered frames
diff -urpN compat-wireless-2012-09-07-before-airtime/net/mac80211/status.c compat-wireless-2012-09-07-after-airtime/net/mac80211/status.c
--- compat-wireless-2012-09-07-before-airtime/net/mac80211/status.c	2013-05-20 17:28:42.090879983 +0200
+++ compat-wireless-2012-09-07-after-airtime/net/mac80211/status.c	2013-05-20 17:47:11.876383114 +0200
@@ -228,7 +228,8 @@ static void ieee80211_set_bar_pending(st
 	tid_tx->bar_pending = true;
 }
 
-static int ieee80211_tx_radiotap_len(struct ieee80211_tx_info *info)
+static int ieee80211_tx_radiotap_len(struct ieee80211_local *local,
+				     struct ieee80211_tx_info *info)
 {
 	int len = sizeof(struct ieee80211_radiotap_header);
 
@@ -248,10 +249,18 @@ static int ieee80211_tx_radiotap_len(str
 	    info->status.rates[0].flags & IEEE80211_TX_RC_MCS)
 		len += 3;
 
+	/* IEEE80211_RADIOTAP_AIRTIME */
+	if (local->hw.flags & IEEE80211_HW_REPORTS_AIRTIME) {
+		len += (len & 1);
+
+		len += 2;
+	}
+
 	return len;
 }
 
-static void ieee80211_add_tx_radiotap_header(struct ieee80211_supported_band
+static void ieee80211_add_tx_radiotap_header(struct ieee80211_local *local,
+					     struct ieee80211_supported_band
 					     *sband, struct sk_buff *skb,
 					     int retry_count, int rtap_len)
 {
@@ -322,6 +331,13 @@ static void ieee80211_add_tx_radiotap_he
 		pos += 3;
 	}
 
+	/* IEEE80211_RADIOTAP_AIRTIME */
+	if (local->hw.flags & IEEE80211_HW_REPORTS_AIRTIME) {
+		rthdr->it_present |= cpu_to_le32(1 << IEEE80211_RADIOTAP_AIRTIME);
+		pos += ((uintptr_t)pos & 1);
+		*(__le16 *)pos = cpu_to_le16(info->status.tx_usecs);
+		pos += 2;
+	}
 }
 
 static void ieee80211_report_used_skb(struct ieee80211_local *local,
@@ -603,13 +619,14 @@ void ieee80211_tx_status(struct ieee8021
 	}
 
 	/* send frame to monitor interfaces now */
-	rtap_len = ieee80211_tx_radiotap_len(info);
+	rtap_len = ieee80211_tx_radiotap_len(local, info);
 	if (WARN_ON_ONCE(skb_headroom(skb) < rtap_len)) {
 		pr_err("ieee80211_tx_status: headroom too small\n");
 		dev_kfree_skb(skb);
 		return;
 	}
-	ieee80211_add_tx_radiotap_header(sband, skb, retry_count, rtap_len);
+	ieee80211_add_tx_radiotap_header(local, sband, skb, retry_count,
+					 rtap_len);
 
 	/* XXX: is this sufficient for BPF? */
 	skb_set_mac_header(skb, 0);
diff -urpN compat-wireless-2012-09-07-before-airtime/net/wireless/radiotap.c compat-wireless-2012-09-07-after-airtime/net/wireless/radiotap.c
--- compat-wireless-2012-09-07-before-airtime/net/wireless/radiotap.c	2012-09-08 11:59:50.000000000 +0200
+++ compat-wireless-2012-09-07-after-airtime/net/wireless/radiotap.c	2013-05-20 17:47:34.708496327 +0200
@@ -43,6 +43,7 @@ static const struct radiotap_align_size
 	[IEEE80211_RADIOTAP_DATA_RETRIES] = { .align = 1, .size = 1, },
 	[IEEE80211_RADIOTAP_MCS] = { .align = 1, .size = 3, },
 	[IEEE80211_RADIOTAP_AMPDU_STATUS] = { .align = 4, .size = 8, },
+	[IEEE80211_RADIOTAP_AIRTIME] = { .align = 2, .size = 2, },
 	/*
 	 * add more here as they are defined in radiotap.h
 	 */
