Author: Johan Almbladh <johan@anyfi.net>
Date:   Mon May 20 18:46:02 2013 +0200

    ath9k: add support for reporting radio time used to transmit frame

    The radiotap capture header supported by mac80211 provides some radio-level
    information on received frames such as bitrate and signal level. This is
    often sufficient for sniffer applications. With accurate airtime statistics
    it is possible to implement true "airtime fairness" bandwidth scheduling as
    a userspace daemon, a feature often available in commercial enterprise-grade
    access points.

    This patch adds support for reporting radio airtime use in microseconds per
    frame back to mac80211, taking all retransmissions - both hardware and
    software - into account.

    Signed-off-by: Johan Almbladh <johan@anyfi.net>

diff -urpN compat-wireless-2012-09-07-before-airtime/drivers/net/wireless/ath/ath9k/ath9k.h compat-wireless-2012-09-07-after-airtime/drivers/net/wireless/ath/ath9k/ath9k.h
--- compat-wireless-2012-09-07-before-airtime/drivers/net/wireless/ath/ath9k/ath9k.h	2013-05-21 14:54:14.748059030 +0200
+++ compat-wireless-2012-09-07-after-airtime/drivers/net/wireless/ath/ath9k/ath9k.h	2013-05-21 14:55:33.456061610 +0200
@@ -223,6 +223,7 @@ struct ath_buf_state {
 	u8 ndelim;
 	u16 seqno;
 	unsigned long bfs_paprd_timestamp;
+	u32 bfs_tx_usecs;
 };
 
 struct ath_buf {
diff -urpN compat-wireless-2012-09-07-before-airtime/drivers/net/wireless/ath/ath9k/init.c compat-wireless-2012-09-07-after-airtime/drivers/net/wireless/ath/ath9k/init.c
--- compat-wireless-2012-09-07-before-airtime/drivers/net/wireless/ath/ath9k/init.c	2013-05-21 14:54:14.780059032 +0200
+++ compat-wireless-2012-09-07-after-airtime/drivers/net/wireless/ath/ath9k/init.c	2013-05-21 14:55:33.468061610 +0200
@@ -694,7 +694,8 @@ void ath9k_set_hw_capab(struct ath_softc
 		IEEE80211_HW_SUPPORTS_PS |
 		IEEE80211_HW_PS_NULLFUNC_STACK |
 		IEEE80211_HW_SPECTRUM_MGMT |
-		IEEE80211_HW_REPORTS_TX_ACK_STATUS;
+		IEEE80211_HW_REPORTS_TX_ACK_STATUS |
+		IEEE80211_HW_REPORTS_AIRTIME;
 
 	if (sc->sc_ah->caps.hw_caps & ATH9K_HW_CAP_HT)
 		 hw->flags |= IEEE80211_HW_AMPDU_AGGREGATION;
diff -urpN compat-wireless-2012-09-07-before-airtime/drivers/net/wireless/ath/ath9k/xmit.c compat-wireless-2012-09-07-after-airtime/drivers/net/wireless/ath/ath9k/xmit.c
--- compat-wireless-2012-09-07-before-airtime/drivers/net/wireless/ath/ath9k/xmit.c	2013-05-21 14:54:14.780059032 +0200
+++ compat-wireless-2012-09-07-after-airtime/drivers/net/wireless/ath/ath9k/xmit.c	2013-05-21 15:08:12.588086477 +0200
@@ -49,6 +49,7 @@ static u16 bits_per_symbol[][2] = {
 
 #define IS_HT_RATE(_rate)     ((_rate) & 0x80)
 
+static struct ath_frame_info *get_frame_info(struct sk_buff *skb);
 static void ath_tx_send_normal(struct ath_softc *sc, struct ath_txq *txq,
 			       struct ath_atx_tid *tid, struct sk_buff *skb);
 static void ath_tx_complete(struct ath_softc *sc, struct sk_buff *skb,
@@ -67,6 +68,8 @@ static struct ath_buf *ath_tx_setup_buff
 					   struct ath_txq *txq,
 					   struct ath_atx_tid *tid,
 					   struct sk_buff *skb);
+static u32 ath_pkt_duration(struct ath_softc *sc, u8 rix, int pktlen,
+			    int width, int half_gi, bool shortPreamble);
 
 enum {
 	MCS_HT20,
@@ -76,6 +79,69 @@ enum {
 };
 
 /*********************/
+/*   Airtime logic   */
+/*********************/
+
+static u16 ath_sat16(u32 x)
+{
+    return x < USHRT_MAX ? x : USHRT_MAX;
+}
+
+static u32 ath_tx_compute_airtime(struct ath_softc *sc, struct ath_buf *bf,
+				  u8 band, struct ieee80211_tx_rate *rates,
+				  struct ath_tx_status *ts)
+{
+	struct ath_frame_info *fi;
+	u32 usecs = 0;
+	int i;
+	int tx_rateindex = ts->ts_rateindex;
+
+	if (tx_rateindex > 3)
+		tx_rateindex = 3;
+
+	fi = get_frame_info(bf->bf_mpdu);
+
+	for (i = 0; i <= tx_rateindex; i++) {
+		int count = (i == tx_rateindex ?
+			     ts->ts_longretry + 1 : rates[i].count);
+		bool is_sgi = !!(rates[i].flags & IEEE80211_TX_RC_SHORT_GI);
+		bool is_40 = !!(rates[i].flags & IEEE80211_TX_RC_40_MHZ_WIDTH);
+		bool is_sp = !!(rates[i].flags &
+				IEEE80211_TX_RC_USE_SHORT_PREAMBLE);
+
+		if (count <= 0)
+			continue;
+
+		if (rates[i].flags & IEEE80211_TX_RC_MCS)
+			usecs += count * ath_pkt_duration(sc, rates[i].idx,
+							  fi->framelen, is_40,
+							  is_sgi, is_sp);
+		else {
+			const struct ieee80211_rate *rate =
+				&sc->sbands[band].
+				bitrates[rates[i].idx];
+			int phy;
+			bool is_sp;
+
+			if ((band == IEEE80211_BAND_2GHZ) &&
+			    !(rate->flags & IEEE80211_RATE_ERP_G))
+				phy = WLAN_RC_PHY_CCK;
+			else
+				phy = WLAN_RC_PHY_OFDM;
+
+			is_sp = rate->hw_value_short && (rates[i].flags &
+				IEEE80211_TX_RC_USE_SHORT_PREAMBLE);
+
+			usecs += count * ath9k_hw_computetxtime(sc->sc_ah, phy,
+					   rate->bitrate * 100, fi->framelen,
+					   rates[i].idx, is_sp);
+		}
+	}
+
+	return usecs;
+}
+
+/*********************/
 /* Aggregation logic */
 /*********************/
 
@@ -427,6 +493,9 @@ static void ath_tx_complete_aggr(struct
 			if (!bf->bf_stale || bf_next != NULL)
 				list_move_tail(&bf->list, &bf_head);
 
+			bf->bf_state.bfs_tx_usecs +=
+				 ath_tx_compute_airtime(sc, bf, tx_info->band, rates, ts);
+
 			ath_tx_complete_buf(sc, bf, txq, &bf_head, ts, 0);
 
 			bf = bf_next;
@@ -484,6 +553,9 @@ static void ath_tx_complete_aggr(struct
 		tx_info = IEEE80211_SKB_CB(skb);
 		fi = get_frame_info(skb);
 
+		bf->bf_state.bfs_tx_usecs +=
+			ath_tx_compute_airtime(sc, bf, tx_info->band, rates, ts);
+
 		if (ATH_BA_ISSET(ba, ATH_BA_INDEX(seq_st, seqno))) {
 			/* transmit completion, subframe is
 			 * acked by block ack */
@@ -2090,6 +2162,8 @@ static void ath_tx_complete_buf(struct a
 	if (ts->ts_status & ATH9K_TXERR_FILT)
 		tx_info->flags |= IEEE80211_TX_STAT_TX_FILTERED;
 
+	tx_info->status.tx_usecs = ath_sat16(bf->bf_state.bfs_tx_usecs);
+
 	dma_unmap_single(sc->dev, bf->bf_buf_addr, skb->len, DMA_TO_DEVICE);
 	bf->bf_buf_addr = 0;
 
@@ -2185,6 +2259,12 @@ static void ath_tx_process_buffer(struct
 		txq->axq_ampdu_depth--;
 
 	if (!bf_isampdu(bf)) {
+		struct ieee80211_tx_info *tx_info =
+			IEEE80211_SKB_CB(bf->bf_mpdu);
+
+		bf->bf_state.bfs_tx_usecs += ath_tx_compute_airtime(sc, bf,
+				tx_info->band, tx_info->control.rates, ts);
+
 		ath_tx_rc_status(sc, bf, ts, 1, txok ? 0 : 1, txok);
 		ath_tx_complete_buf(sc, bf, txq, bf_head, ts, txok);
 	} else
